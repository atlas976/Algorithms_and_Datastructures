#include "gtest/gtest.h"
#include "../include/blatt8.h"

using VEC = vector<int>;
using LS = std::pair<VEC, int>;

TEST(MaxSubarray, Empty) {
    vector<int> a{};
    int result = max_subarray(a);
    ASSERT_EQ(result, 0) << "Wrong output for empty list. Expected 0 but got " << result;
}

TEST(MaxSubarray, SingleElement) {
    vector<int> a{1};
    int result = max_subarray(a);
    ASSERT_EQ(result, 1) << "Wrong output for list with single element. Expected 1 but got " << result;
}
TEST(MaxSubarray, SingleElement2) {
    vector<int> a{52384};
    int result = max_subarray(a);
    ASSERT_EQ(result, 52384) << "Wrong output for list with single element. Expected 52384 but got " << result;
}
TEST(MaxSubarray, SingleElementNegative) {
    vector<int> a{-901231};
    int result = max_subarray(a);
    ASSERT_EQ(result, -901231) << "Wrong output for list with single element. Expected -901231 but got " << result;
}
TEST(MaxSubarray, TwoElementsNegative) {
    vector<int> a{-901231, -134245};
    int result = max_subarray(a);
    ASSERT_EQ(result, -134245);
}
TEST(MaxSubarray, ArrayZero) {
    vector<int> a{23423, 0, -91983};
    int result = max_subarray(a);
    ASSERT_EQ(result, 23423);
}

TEST(MaxSubarray, ArrayPositive1) {
    vector<int> a{2,4,6,4,7,5,2,6,4,7};
    int result = max_subarray(a);
    ASSERT_EQ(result, 47);
}
TEST(MaxSubarray, ArrayPositive2) {
    vector<int> a{5,5,6,6,4,5,1,10,54,76,23,4,3,2,43,2};
    int result = max_subarray(a);
    ASSERT_EQ(result, 249);
}

TEST(MaxSubarray, Array1) {
    vector<int> a{-71, 88, -78, 76, -20, 37, 84, 87, 10, -51, 93, -65, -99, 44, -16, 57, 7, -51, -43, -66, -30, 92, -28, 72, 43, 29, 81, 8, -81, -81};
    int result = max_subarray(a);
    ASSERT_EQ(result, 361);
}
TEST(MaxSubarray, Array2) {
    vector<int> a{-46, -8, -87, 42, -40, -97, -35, 55, -18, -79, -53, 79, -12, 45, -96, 90, -14, 70, -96, -23, 98, -26, -55, 80, 18, -39, -51, 10, -68, 100};
    int result = max_subarray(a);
    ASSERT_EQ(result, 162);
}
TEST(MaxSubarray, Array3) {
    vector<int> a{-89, 34, -24, 98, 67, -20, -31, -79, -87, -90, 16, 46, -67, -100, 60, -4, 80, 87, -52, 19, 9, 4, -61, -36, 13, 79, -1, -10, 57, -87};
    int result = max_subarray(a);
    ASSERT_EQ(result, 244);
}

auto randomArraysSolutions = testing::Values(LS{VEC{-896867, -755357, 157775, 244388, -168099, 155422, 828401, 291634, -866529, -517309, 193128, 422602, -362216, 379364, -6689, -265113, 286438, 632146, -479210, -175502, -353085, 887362, -638552, 997990, -429362, -130547, -767989}, 1644346}, LS{VEC{-726836, -896395, -966994, 109170, -388363, 360345, 520364, 673532, 27768, -753482, -766546, 218369, 420930, 306064, -671116, 37316, -639375, 307590, 334527, -388800, -74010, 603079, 386445, 194292, -280521, -166133, -888976, -510807, 468220, -387284, 224972, 760171, 166583, -554277, 835453, 58213, 336396, -469855, 702801, 828501, -113724, -871419, -565145, -982007, -18784, 940311, 852511, 121686, 848048, 903337, -160601, -674574, 338377, -789490, 696023, -23568, 864235, -735747, -289321, 481063, 39728, 271640, 53260, -352851, 368758, -73779, -181328, 333020, 129906, -381265, 490741, 602201}, 5091136}, LS{VEC{-113349, 709356, 125554, 24270, -927108, -963146, 494329, -438612, -820110, 701633, 365724, -478112, 205700, 879818, -958113, -141710, -792268, 506648, -13056, -241645, -55093, 173002, 372819, 536197, -429554, -950469, -176958, 123932, -280542, -397001, -963778, 292319, -599272, 934942, 264052, -472108}, 1674763}, LS{VEC{-113649, -504232, -352847, -190909, 427314, -865425, 558245, -526540, -491953, 188099, 708831, 143472, -860930, -943387, 660230, -562231, -343474, 858809, 577550, -63347, -787224, -455775, 813812, 991821, -982024, -952044, 187228, -893782, 205660, -814670, -259421, 174648, -739628, 109058, 961689}, 1935646}, LS{VEC{861084, 638226, -24200, 212150, 218587, 547018, -278254, -554617, 914720, 30432, 957404, -204265, 932369, -405393, 59148, -399238, -679398, -815771, -308882, 90970, 445451, 392226, -797284, 623509, 345714, 935417, -343499, -709914, 926398, -908779, 626210, -679751, -192080, -802737, 348210, 317446, -167001, 635355, -196354, 628496, 571989, -957465, 849226, 429535, -415683, 736392, 651075, 941092, 198725, -630441, 1226, 754416, -126155, -744205, -399785, 561544, 750806, -856964, -523712, 227409, 485104, 409772, 220837, 904673, 720618, 576107, 169630, -607430}, 8724889}, LS{VEC{972200, -592502, -647521, 479639, 277755, 513586, 645806, -668997, -194913, -722626, 7804, -913600, -102053, 155308, 249846, 658308, -234939, -529325, 111962, 968264, 997463, 21579, -828748, -913847, -144278, 211997, 330457, -556435, 793977, -277164, 206282, -113767, 601232, 254443, 654099, 683328, -76494, 359602, -21462, 582112, 886814, 15261, -356939, 692032, 102452, 340702, -521532, 686129, -870017}, 5988719}, LS{VEC{-698922, -895614, -543756, 709251, -547772, -35913, 842447, 647035, 19140, 963062, 277158, 592790, 996106, 27690, 986223, -236919, 552185, -546986, 929261, 693837, 576164, 843407, -678590, -23209, 355369, 277614, -606726, -660906, 135987, -466323, -636577, -882042, -541634, -846354, 551633, 661921, 76145, 871315, 544116, -704737, -916702, -736667, -35794, -462538, -489999, 378348, 756352, 442078, -777253}, 8288166}, LS{VEC{923301, 801043, -909184, -750788, 739165, 68765, 34406, -49841, -597572, -466759, 368091, -64675, -281107, -498679, 229990, 3180, -874993, 569997, -850267, 111318, -783960, -321741, -838686, 389820, -329154, 496290, -117761, -434674, 714636, 710598, 779516, 589569, 477395, -873047, -316160, 543087, -403707, 35647, -849768, 967154, 925080, 488809, 457132, 492894, 664263, 331953, 892246, 422663, -927769, -996146, 951740, -996961, 20577, -99384, 658121, 56670, -804270, -922410, -993521, -493348, 475572, 224312, -877784, 546992, -552549, -323415, -909535, 605661, -868989, 173606, -897754, -590960, -944167, 706472, 748425, -453023, -282941, -853311, -319347, -487716, 423949, 279283, -22204, 956427, 929824, 618064, 604977, 142892, -512086, -938322, 93559, -500287, -549653, -330569}, 7054481}, LS{VEC{473515, -822707, -944068, -791329, -528009, 315994, -137931, -560824, 139368, -678860, 793767, 407366, 110283, -154430, -743557, 437421, -302714, 240882, -495951, 969239, -788622, -336676, 59682, -955191, -898174, -638568, 71007, 91192, 662774, -438370, 697541}, 1311416}, LS{VEC{330274, -683816, -936000, -568113, -79605, 759856}, 759856}, LS{VEC{-45085, 723260, 899864, -452059, 540680, -785404, -160814, 634853, 247684, 808308, 405234, -543634, -679205, -342221, -223676, -741316, -270470, 815032, 435933, -32273, -521874, -19313, -264527, -593022, 999366, 928679, 435501, 794653, 354492, -26409, -417248, 776831, 15977, -575958, -780375, 753317, 899626, -336087, 660931, -748754, -43143, 196278, -541022, 69875, -356785, 473450, -819280, -440261, 617268, 588292, 616828, 90739, 196079, -21443, 949579, 512718, 717828, -497177, 942713, 757272, 376163, 28724, 849303, -956279, -738458, -308552, 377479, -823072, -736376, 699070, 291867, 587501, -119189, 539121, 982154, -799763, -379215, 632563, 115376, -170809, 342094, -175945, -674834, 720186, 227276, -655575, 248683, 475874, -24681}, 8998540}, LS{VEC{527728, 850670, -242148, 913188, 310662, -336522, -400976, -514016, -612615, -957035, 282759, -401785, 406976, 754400, 607549, 984923, -973371, -136359, 797161, -393627, 958499, 749541, -948856, 904768, 820063, -878015, 224868, -673327, 776654, -64278, -630136, 714659, 542091, 665935, 657152, 361040, -225610, -888239, -8883, 466644, -552190, 751704, -235682}, 6228310}, LS{VEC{99393, 177012, -494125, -308063, -545407, -710932, 662979, -181508, -767981, 373008, 517335, 106482, -460185, -288346, -343925, -1664, -637620, -967264, 674158, -588296, 622788, 807430, 629278, 699678, 459633, 668015, 548767, 839857, 301498, 590772, -232149, -97117, -355626, 341912, 778555, 29142, -164542, -791412, -20214}, 6718295}, LS{VEC{-984626, 896873, 524973, -910924, -499303, -119251, -909163, -544029, -643454, 572444, 939007, 532572, -905157, -519162, 621352, 718818, -916515, -91976, -896405, -984277, -685541, 646134, -643264, 664179, 18035, 492522, 312832, -29309, -201113, -936419, 865920, -890109, -909764, -432553, -867057, -437338, -796580, 27258, -251708, 573868, 32947, -91165, 25491, 502173, 283093, 237462, 68872, 943701, 489671, 279260, 728040, 277970, -758292, -933765, -230547, -369927, -477373, -883571, -70859, 802506, -823877, 454558, 104315, 420811, -620044, -430086, -427745, 863797, -706483, 911519, 613025}, 4351383}, LS{VEC{-736578, 876265, -883562, 580023, -958597, -7668, 802037, 485687, 643940, 67955, -420346, -68437, 56347, 544415, 309997, -771099, 801570, -247373, -915001, -371958, -110112, -460611, 863047, 73369, -887860, -119936, -452646, -485008, 608933, 624092, 374111, 945532, 844671, 51344, -400889, -975276, -262348, 626729, 852968, -61556, 184961, 614557, -583951, 668030, 22429, 750986, 599434, -740511, 307146, 132208, 821005, 877494, -585356, 206483, -540730, -738083, -694176, -843368, 869573, 603277, 413294, 105045, 821916, 61272}, 6882099}, LS{VEC{292555, 542187, -631621, -738219, -907722, -452115, 761656, -537229, -438248, 185060, 641792, 558397, -540168, -35299, -726711, -446878, 548218, 785030, 641601, 432574, -652448, -671372, -155177, -374830, -752550, -882105}, 2407423}, LS{VEC{541838, -174653, 129295, -127903, 240946, 877391, -122807, 732803, -813442, 64453, -110252, -768715, -715269, 159901, -51785, 219050, 196286, -613829, -860034, -300590, 285656, 520223, -830021, 225407, 238662, -745398, -821504, 282409, -567815, 346752, 212126, -495645, -351530, -359440, 645944, 524082, -394440, -726180, -550040, -190192, 684320, -733594, 876484, -518005, 75347, 66905, 488940, 906458, 310427, -11577, 826409, -325078, 14792, 64488, -422449, 300377, -318881, -680186, 16010, -666996, 131664, 766562, 466390, -718100, 591909, -391388, -299581, -633780, 849780, -548833, -618529, -578330, -627016, -157069, -646069, 393121, 754715}, 3021388}, LS{VEC{246838, -454069, 694835, -75239, -719717, -417422, 758813, 436942, -914018, 913115, 261854, 186006, 441537, 702613, -718372, 947061, -801822, 323098, 798434, -405591, 262633, -159235, 206071, 333714, 570399, 421613, 2398, 521887, 886958, 497496, 443504, -949252, 762816, -486326, 229131, 402687, -116119, -720928, -746232, -815874, -96484, 748308, 455237, 396687, 112361, 761122, -313788, -928632, 413087, -977429, 329430, -273515, 235077, 77485, 6669, -391375, -56268, -812892, -684917, 956081, -642945, -890278, -342697, -878343, 966072, 341530, 926996}, 6917108}, LS{VEC{779743, 313202, 343074, 266358, 758165, 651856, -686901, 581262, 446780, -254337, -114737, 478658, -750159, 151454, -119009, -554974, 57569, 382014, 463010, 828805, 269030, 56659, 573767, 510711, -73339, -80307, -922108, -665079, 882710, -763594, 689494, -195036, -782122, -273737, -964270, 399803, -84057, 740886, 246745, 833870, 401619, 754113, -632960, 261003, 695762, -708275, 979326, 771622, 809329, -110681, -971339, -162274, -348991, 831307, -998884, 566919, -878189, -234775, -58091, -101469, -432411, 455598, 928051, 486806, 834116, -473823, 478508, -780111, 403582, 931879, 962093, -786190, -405153, 947843, -143396, 442107, -410683, 942826, 285661, 251860, 825967, 709829, -222477, 302793, -970687, -640273, -259538, 293341, 74636, 917016, 781732, 752915, -360434}, 12771348}, LS{VEC{328390, 561307, -694686, 76592, -720167, 275755, -167062, -279062, -264640, -173378, -811439, -912662, -304866}, 889697}, LS{VEC{-704307, 819436, -514651, -65198, 571851, 800062, -429364, 201314, 207477, 45919, 880559, -703840, 67862, -832693, -670511, 806860, 302552, -209090, -582671, 966373, -393280, 449637, 879166, 854154, 685388, -384179, -638482, -367374, 917697, -725397, 322239, -146827, -787500, 897176, 42842, -587575, 227301, 601041, 630774, 51624, 759436, -16328, 73960, 634676, -181516, 711383, 933965, -536287, 255530, 260207, 111844, 527471, -277034, 292148, 410913, -751509, 180852, 316060, -775792, -718471, 858485, 8599, 663904, 991855, 644099, -528974, -9032, 959852, -662980, 509903, -365405, 921951, -769334, 335894, 63298, -668850, 735651, -311367, 887058, 921368, -874313, 903261, -998589, -847284, -519341}, 11617103}, LS{VEC{-885117, 299460, 436948, -987306, 650777, -795879, 76233, -101525, 935546, 398904, 752824, -296369, -467205, 227922, -418083, 86397, -628971, 605187, 433701, 721950, 65542, -848213, -840271, -325833, -535314, -55192, -5161, 910000, -160828, 965352, -820967, 268399, -549008, 808601, 525112, -750345, -117991, -512028, 134451, -628961, 279630, -483749, 852177, 755951, 163423, 906292, 779531, -986411, 79412, 456869, 301747, 405019, -915336, 350996, 821490, -920492, -745896, 994595, 879675, -605719, -461516, 792373, -569156, -953849, -527947, 315456, -567224, 220557, 24678, 556372, -754316, -614146, 713476, -800152, -918710, 215835, -870343, 275694, 510332, 410886, -251865, -631536, -560212, 265285, 31057, 264884, 782665, -345820, 405480, 67391}, 4179042}, LS{VEC{-130766, -243174, 819204, 405801, -140493, 755693, -209183, -233675, -84802, -444059, -392351, 199795, 335474, 191836, 34257, 61855, 639005, 252690, 345936, 367629, -670498, 702202, -376678, 40791, -901971, 386888, -660110, -401927, 109116, -986019, -460952, 243795, 692413, 631324, 140061, 895396, -722886, 986807, -70459, 718017, -152784, -871923, -552964, -516230, -957337, -311197, 41177, 235491, -52282, 529432, -750475, 385668, -725638, -616537, -50430, -922771, 706852, -727534, 234953, -476362, 915564, -299054, 587588, -942679, -137462, 848777, 1048, 271976, 995860, 354087, -35823, -828048, 985431, -660586, 831270, -338075, 768622}, 3514468}, LS{VEC{496653, 189595, -950444, -722335, -918772, 854386, -306851, 765316, -138194, -691491, 293468, 235595, -566585, -309134, 637738, 654148, 192331, 454792, 768966, -191572, -59238, 50685, -31335, -547211, 736222, -581982, 885072, -962127, -735966, 561130, 799765, 676625, -26992, 54379, 972913, 419457, -852947, 824547, -432877, -21296, 459150, -392263, 270044, -687357, 575574, -291997, -700486, 41390}, 4864310}, LS{VEC{-617446, -269689, -670635, 765299, 200323, -944543, 63542, -471629, 632522, 763686, 98532, 420291, -57732, -518287, -549902, -269694, -945480, 305149, -732732}, 1915031}, LS{VEC{368420, 828615, -587866, 955482, 638864, 635234, -522030, -961441, 793072, 904058, 435845, -393446, 762788, -392254, 140098, 789648, 203209, 521499, -252559, -262732, 306865, 558427, 650914, -867068, 84843, -213583, -490431, -301205, -375000, 437929, -889870, -174634, 866845, -320655, 424125, -544586}, 6120710}, LS{VEC{507218, 63455, 959464, 254847, -719946, 576147, 7506, 869287, 79349, -971447, 369114, 161816, 991261, -422739, 797075, 191914, -698165, 506995, -128689, -587752, -388506, -352553, 980797, -573903, 900490, -28476, -175161, 702249, -19039, -551323, -854428, -918701, 643056, -346869, 169243, -723698, -400769, 248753, -122311, -284301}, 3871647}, LS{VEC{661180, 437760, -968430, 248682, 805762}, 1184954}, LS{VEC{868089, 187935, -321023, 74064, 242584, -515957, 346680, -508090, -509937, -773854, -785568, -908172, -5251, -244649, 508657, 92309, 88209, -986199, 194814, 864578, -488056, 772823, 242323, 584743, 107119, -506751, 417491, -39823, -488609, -121026, -738428, -989339, -330309, -99232, -344694, 935990, -458090, 784515, -932401, -352056, 74546, -145628, -675946, 9903, -28976, 635293, 42086, 150644, -320941, 361902, 946521, -144672, -210552, -690491, -519339}, 2278344}, LS{VEC{532477, -838357, -762565, 826363, 659182, 976713, -251540, -889265, -682557, 837240, 712461, -97553, -449122, 696535, 115271, 591115, -23819, 443550, 666984, 824090, 250355, 777549, -371786, -891326, -998459, -850368, 279172, 148358, 848383, -536289, 729394, -382820, -764503, -168966, -213311, 556478, -447803, 782001, 615819, 706102, 188237, -596853, -60652, 773800, -354873}, 5983552}, LS{VEC{749378, 876733, -621197, 229428, 753732, 856328, 571360, -847406, 74750, 44894, 671791, 836773, -524527, -442319, -537657, 58596, -590507, -410901, 1512, -18241, 256322, -383780, -613780, -517548, 925395, -803336, -784236, -488889, -172359, 792204, -193762, -40041, 13880, -56963, -895315, 625436, 892716, 624311, 106661, 457442, -501315, -618244, 214941, 43580, 439432, 213274, 9815, -851362, 47080, -288766, 606470, -42351, -943319, -437718, -598159, 720411, -514560, -894298, 252921, 766442, -390273, -165498, -214942, -671211, -45492, 999180, -407021, 653384, -850423, 490444, -646804, 501661, 625421, -36254, 493737, 655989, -340719, -562259, -575446, -203122}, 4196564}, LS{VEC{-950704, -929659, 440207, 445742, 348576, 521001, -954790, -770565, 33226, 693348, -836235, 162723, 880283, -772396, 528015, 671918, -783993, -945813, 530746, -176280, -798726, 535456, -820783, -80538, 886979, -885305, -851425, -529555, -695924, 990025, 775360, 369980, 896164, -698657, 323229, 356574, -863485}, 3031529}, LS{VEC{409258, 193117, -678691, 800075, -427947, -520339, 272351, 251878, 281686, -327041, 490888, 605287, -843546, 423969, -771579, 304779, 527808, -200765, 517620, 863901, -214796, -506801, 850752, 370051, -493757, -746746, 90768, -946074, 680967, 573831, 477657, -367009, -591341, 415023, -383354, -602143, 371579, 514198, -459770, 750730, 418951, -598073, -581421, 277839, 356390, 666100, 25417, 379797, -955429, 342447, -79957, -204706, 517225, 71890, -29141, -585419, 610267, 439448, 429408, -113398, -819927, -655192, -266869, 585789, 134860, 780134, 816619, 830184}, 4974234}, LS{VEC{-692403, -629231, 243585, -656095, 31607, 976091, 240498, -755173, 572425, 723536}, 1788984}, LS{VEC{-518486, -885925, 140750, 624619, -969373, -473875, 507676, -759912, 937663, 65765, 146599, 606158, -547263, -845925, -773648, -42296, -128289, 885478, 450257, 268816, -563504, 558070, 715015, -669821, 237483, 700927, 316967, 316506, -446388, 908215, 144991, -905236, 627378, -207422, 156317, -692811, -18475, -204738, 371118, 374908, 673015, 576959, 246816, -495687, -198711, 320283}, 4820841}, LS{VEC{-581975, 798243, 40365, 477641, -622253, -906614, 883674, -311691, -306092, -30114, -286705, 451786, 901421, -667524, 906226, -696032, -809668, -247189, -560550, 422986, 164780, 190038, -333238, -81142, 850803, 651818, 442860, -728119, -299758, 603927, 539984, -820835, 755221, 481087, -93264, 575186, 941469, -882893, 150286, 79945, -243174, -181815, 220780, -863163, 487460, -524812, 431605, 442840, -44860, -818549, -729907, 235857, -982530, 32648, -594029, -17273, -771918, -473204, 749636, 26457, 246604, -923550, -453256, 701144, 647943, 966135, 716438, 502476, 890321, 582185, -255050, -804980, -991086, 568661, 46927, -662370, 332408, -415449, -499130, 267229, -401922}, 5006642}, LS{VEC{35812, 183664, 23447, 716330, 626959, -304916, -558472, 636601, 177864, 613058, -315788, 23190, -974279, -399268, -99192, 374409, -404134, 867760, 188120, -338640, 871267, -347033, 429576, 231951, 579565, 115347, -924612, -563888, 233995, -364311, 782297, 370023, 408979, -269684, 150883, 228593, -270214, -716860, 627967, 180534, 919882, -846572, 862872, -644854, -971942, -120996, -930893, -289794, -425825, -463697, -868938, -631944, 83060, 223560, 529892, 14300, -324045, -878699, 913481, -162323, 378017, 86893, 746314, 119723, -573014}, 3763082}, LS{VEC{791430, 474861, 582026, 965531, -285046, -615117, -337372, 109955, 679032, 787142, 951245, 393903, -559594, -4501, -368735, -674440, -934004, 787896, -623122, 213885, 912875, -215000, 8488, -652515, 960003, 390807, 84102, -823018, 937504, 288820, 524926, -247228, -185421, 772278, -423996, -257689, -373979, 828212, -579090, -174528, -672194, -332699, -25655, 150495, 94350, 692715, -818916, -131391, -357289, 906338, 501224, 554368, -230219, -862086, 105363, -618659, 29692, -525803, -850021}, 5091596}, LS{VEC{409523, 403807, -251181, 301366, 266857, -439655, -796257, -295574, 219018, -793900, 359285, 567508, 439681, -606881, -907393, 363846, -707277, -295050, -958601, -448231, -437991, -770035, 928200, -478754, -278943, 301206, 547082, -701925, -447148, 276113, 333816, -882710, 16566, -395942, -871262, -862173, 372901, 269681}, 1366474}, LS{VEC{-304863, 386245, 576537, -843921, 120001, -304378, 354039, -417356, 775381, -529666, 335016, 766898, -123202, -197344, -820295, -378487, 162859, 754458, 896470, -669792, -356004, 53107, -14919, -387211, -494849, -121825, 996722, 260477, -812901, -308582, 793147, 135693, 271481, -143149, 853018, -933426, -622784, 82932, 105987, -468761, 223250, -42362, 581751, 915215, 737520, -700527, 219257, 193419, -889099, -345520, -803938, 426179, 864877, 556160, 121418, -707455, 51511, -220981, -821843, 244977, 586081, -695358, 145413, -553846, -790502, -627398, -451437, -345134}, 2625228}, LS{VEC{25307, 319018, -707501, 470629, 914167, -265642, 87299, 268198, -407928, -585282, -278138, 696778, 982775, -353732, 32522, -467019, -350610, 347093, -981513, 696452, 336298, -568726, 236920, -554420, -455605, 908670, 289415, -768259, 528401, 444615, -152199, 233596, 882786, -495749, -845068, -168309, -88259, 215599, 546019, 444631, -892167, 170235, -392169, -967974, 669950, -926198, 577843, 30071, 153844, -470332, 859166, 153822, -728867, -538735, 659011, -215311, 302168, 420368, 941251, 1994, -943954, -625284, -884874, 243658, 20632, -350593, -287978, 909390, -749952, -17833, -851274, 456348, -94678, -604678, 249780, 129354, 248302}, 2367025}, LS{VEC{98296, -360145, -527212, -127130, 5617, -339592, 492948, 500963, 362513, -863634, 599141, 958682, 822137, -442148, -25029, 992278, -611206, -775075, 160584, -274677, -604135, -67220, 246409, 756215, 22125, -512375, 550904, 794339, -772348, -386884, 462364, -810256, -108978, 220279, -68077, -783238, -526876, 773394, -422554}, 3397851}, LS{VEC{122626, -748453, -495673, 240559, 597549, -728227, -509559, 529619, 49043, 564271, 95146, 339538, -288098, 420830, -212043, -205859}, 1710349}, LS{VEC{-72166, 836349, 657522, 539501, -839172, 958233, 824095, 906554, 190967, -249210, -762538}, 4074049}, LS{VEC{-44352, -872514, -2783, 4182, -345758}, 4182}, LS{VEC{957179, 145085, 186767, 604450, 765465, -888887, 804302, -728820, -599381, -938359, -243154, 57206, 918018, 745848, -652450, 449463, 635695, 275225, 789798, -123129, -288444, -393610, 689946, -384835, -393371, 456777, 613817, -474847, 738877, 985993, 56364, -70170, -148791, 847584, -814925, 751912, 552192, -965949, -395573, 370303, 973839, -560845, 318004, 232168, -765314, -486737, -265331, 622595, -877332, -228527, -901357, -597199, 67410, -528257, 237670, -690148, -793117, 444065, 230135, -832068, -178693, 112549, 957534, -506469, 11729, -131394, 750723, -60948, 690043}, 5884790}, LS{VEC{559983, -18242, -276428, -415432, 339561, -794763, 493670, -182800, -194806, -101579, -893796, -535380, -200487, -921101, 672083, -442607, 559814, 972469, -785315, 940239, 183473, 210230, -707950, -184369, -183752, -424909, 423057, -605288, -957597, -956591, 966264, -611189}, 2310386}, LS{VEC{474667}, 474667}, LS{VEC{-165755, 45132, 325095, -400562, 420713, 620534, 533349, -157836, 486219, -51487, 493568, 164315, 977007, 145141, 900884, 722988, -505039, -620487}, 5255395}, LS{VEC{678034, -337309, -980905, 161906, -333764, -445850, 30527, 132374, 268858, -360319, -476206, 247772, -886256}, 678034});

class MaxSubarray : public testing::TestWithParam<LS> {};

TEST_P(MaxSubarray, CheckList) {
    auto [input, expected] = GetParam();
    int output = max_subarray(input);
    ASSERT_EQ(output, expected);
}

INSTANTIATE_TEST_SUITE_P(
        RandomLists,
        MaxSubarray,
        randomArraysSolutions
);


using PPI = std::pair<int, PolynomialParams>;

class PolynomialTest : public testing::TestWithParam<PPI> {};

vector<PPI> pols{PPI{0, {{1, 6.65}, {7, -2.93}}}, PPI{1, {{1, -6.65}, {2, 8.86}, {3, -9.76}, {4, -3.90}, {7, -5.51}, {9, -3.55}}}, PPI{2, {{0, 4.92}, {5, -7.38}, {7, -4.79}}}, PPI{3, {{0, 6.79}, {1, 4.40}, {8, -5.65}, {9, 2.77}}}, PPI{4, {{0, -4.00}, {1, 6.39}, {6, 9.59}, {8, 3.70}}}, PPI{5, {{4, 6.99}, {5, 4.98}, {6, -2.62}}}, PPI{6, {{3, -3.10}, {5, 5.89}, {7, 3.08}, {8, -2.75}}}, PPI{7, {{1, 0.49}, {7, 0.62}, {8, -3.57}, {9, -7.34}}}, PPI{8, {{0, 4.65}, {2, 5.05}, {3, 5.37}, {4, -9.17}, {5, -5.14}, {8, -9.89}}}, PPI{9, {{2, 8.90}, {3, -1.23}, {4, 1.96}, {8, 3.76}}}, PPI{10, {{0, -1.15}, {1, -3.01}, {2, -2.28}, {5, 8.85}, {6, 3.90}, {9, 8.67}}}, PPI{11, {{6, -1.82}, {7, -0.69}}}, PPI{12, {{0, 2.44}}}, PPI{13, {{4, -9.12}, {8, 1.69}}}, PPI{14, {{2, 1.75}, {4, 3.02}, {6, -2.56}, {7, 5.13}, {8, -7.14}}}, PPI{15, {{5, -4.60}, {9, -8.37}}}, PPI{16, {{5, -7.01}}}, PPI{17, {{0, -3.12}, {2, -6.65}, {5, -3.56}, {6, -3.00}, {9, 0.43}}}, PPI{18, {{7, 3.12}}}, PPI{19, {{1, -3.11}, {7, 1.16}, {9, -1.22}}}, PPI{20, {{3, 5.20}, {4, -7.10}, {9, -8.23}}}, PPI{21, {{0, 0.19}, {8, -6.45}, {9, 3.72}}}, PPI{22, {{0, -3.11}, {1, -6.35}, {2, -9.09}, {3, -4.61}}}, PPI{23, {{2, -3.95}, {4, -0.92}, {7, -3.04}, {9, -7.38}}}, PPI{24, {{0, 6.50}, {5, 4.29}, {8, -2.40}, {9, 2.63}}}, PPI{25, {{2, -2.97}, {6, 0.52}}}, PPI{26, {{7, 7.08}}}, PPI{27, {{2, 9.34}, {3, -5.17}, {8, 5.66}, {9, -8.29}}}, PPI{28, {{0, -6.78}, {7, -6.62}, {9, -9.40}}}, PPI{29, {{2, 3.72}, {4, -0.46}, {8, -9.29}, {9, -1.90}}}, PPI{30, {{0, 5.18}, {1, -0.79}, {6, 3.48}, {9, 5.42}}}, PPI{31, {{0, -3.45}}}, PPI{32, {{0, 5.53}, {2, 1.34}, {7, -7.31}}}, PPI{33, {{7, 7.78}, {9, -7.72}}}, PPI{34, {{5, -0.91}}}, PPI{35, {{1, -7.87}, {3, 6.57}, {7, 5.89}}}, PPI{36, {{0, -8.64}, {1, -5.58}, {5, 4.66}, {6, 2.88}}}, PPI{37, {{0, 8.38}, {2, 5.21}, {5, 9.38}}}, PPI{38, {{3, -7.21}, {4, 8.59}, {5, -7.44}, {7, -4.67}}}, PPI{39, {{0, 2.68}, {3, 9.16}, {7, 8.13}, {8, -7.03}}}, PPI{40, {{1, 6.43}}}, PPI{41, {{0, 1.81}, {3, -3.10}, {9, 0.46}}}, PPI{42, {{3, -2.02}, {6, -7.11}, {7, -7.91}}}, PPI{43, {{1, -8.86}, {5, -3.43}, {6, 8.36}, {7, -7.86}, {9, 4.43}}}, PPI{44, {{1, -5.94}, {7, -0.97}}}, PPI{45, {{0, 4.53}, {5, -6.35}, {8, -9.05}}}, PPI{46, {{3, -8.94}, {8, -0.68}, {9, 4.37}}}, PPI{47, {{5, -8.58}, {7, -7.43}, {9, 2.26}}}, PPI{48, {{1, 5.08}, {8, -2.09}, {9, 8.05}}}, PPI{49, {{0, 0.22}, {2, 0.28}, {4, 4.31}, {8, -7.36}, {9, 5.96}}}, PPI{50, {{2, 1.12}, {3, 7.45}, {4, 3.19}, {6, 3.93}, {7, -6.31}}}, PPI{51, {{3, 8.62}, {4, 3.91}, {6, 7.01}}}, PPI{52, {{4, 1.97}, {5, 7.95}, {8, 6.54}}}, PPI{53, {{0, 0.11}}}, PPI{54, {{3, -1.63}, {4, -7.29}, {5, -3.11}}}, PPI{55, {{4, 8.26}, {6, -5.45}}}, PPI{56, {{2, -5.06}, {5, -1.09}}}, PPI{57, {{2, 2.66}, {3, 8.36}, {4, -6.82}, {5, -5.66}, {8, 7.78}}}, PPI{58, {{0, 4.84}, {2, 7.48}, {3, 9.50}, {4, 7.18}}}, PPI{59, {{2, -5.06}, {5, 2.61}, {7, 2.79}, {9, 9.15}}}, PPI{60, {{0, -8.66}, {1, -5.20}, {3, 5.15}, {4, -6.23}, {8, 5.89}, {9, 6.45}}}, PPI{61, {{2, -3.88}, {7, -6.13}}}, PPI{62, {{1, -4.23}, {3, 2.17}, {4, 4.84}, {6, 7.99}, {8, 3.87}}}, PPI{63, {{0, 9.88}, {7, -1.06}, {8, -3.88}}}, PPI{64, {{1, 5.90}, {5, -5.40}, {8, 9.62}}}, PPI{65, {{6, -7.60}}}, PPI{66, {{0, -1.45}, {3, 1.08}, {4, -0.68}, {5, 0.30}, {6, 6.08}}}, PPI{67, {{1, 7.96}, {2, -1.94}, {3, -3.51}, {5, 2.50}}}, PPI{68, {{1, 1.39}}}, PPI{69, {{0, -3.16}, {2, 0.22}, {8, 4.84}, {9, 2.97}}}, PPI{70, {{0, -9.61}, {3, -1.38}, {5, 1.23}}}, PPI{71, {{3, -8.00}, {6, -7.78}, {7, -7.92}, {9, -6.08}}}, PPI{72, {{1, 7.01}, {3, 1.00}, {5, 7.13}, {6, -0.72}}}, PPI{73, {{3, -4.41}, {5, -1.32}, {8, -3.42}}}, PPI{74, {{1, -0.01}}}, PPI{75, {}}};

auto sumSols = std::vector<PolynomialParams>{{{2, 8.86}, {3, -9.76}, {4, -3.9}, {7, -8.44}, {9, -3.55}}, {{0, 4.92}, {1, -6.65}, {2, 8.86}, {3, -9.76}, {4, -3.9}, {5, -7.38}, {7, -10.3}, {9, -3.55}}, {{0, 11.71}, {1, 4.4}, {5, -7.38}, {7, -4.79}, {8, -5.65}, {9, 2.77}}, {{0, 2.79}, {1, 10.79}, {6, 9.59}, {8, -1.95}, {9, 2.77}}, {{0, -4}, {1, 6.39}, {4, 6.99}, {5, 4.98}, {6, 6.97}, {8, 3.7}}, {{3, -3.1}, {4, 6.99}, {5, 10.87}, {6, -2.62}, {7, 3.08}, {8, -2.75}}, {{1, 0.49}, {3, -3.1}, {5, 5.89}, {7, 3.7}, {8, -6.32}, {9, -7.34}}, {{0, 4.65}, {1, 0.49}, {2, 5.05}, {3, 5.37}, {4, -9.17}, {5, -5.14}, {7, 0.62}, {8, -13.46}, {9, -7.34}}, {{0, 4.65}, {2, 13.95}, {3, 4.14}, {4, -7.21}, {5, -5.14}, {8, -6.13}}, {{0, -1.15}, {1, -3.01}, {2, 6.62}, {3, -1.23}, {4, 1.96}, {5, 8.85}, {6, 3.9}, {8, 3.76}, {9, 8.67}}, {{0, -1.15}, {1, -3.01}, {2, -2.28}, {5, 8.85}, {6, 2.08}, {7, -0.69}, {9, 8.67}}, {{0, 2.44}, {6, -1.82}, {7, -0.69}}, {{0, 2.44}, {4, -9.12}, {8, 1.69}}, {{2, 1.75}, {4, -6.1}, {6, -2.56}, {7, 5.13}, {8, -5.45}}, {{2, 1.75}, {4, 3.02}, {5, -4.6}, {6, -2.56}, {7, 5.13}, {8, -7.14}, {9, -8.37}}, {{5, -11.61}, {9, -8.37}}, {{0, -3.12}, {2, -6.65}, {5, -10.57}, {6, -3}, {9, 0.43}}, {{0, -3.12}, {2, -6.65}, {5, -3.56}, {6, -3}, {7, 3.12}, {9, 0.43}}, {{1, -3.11}, {7, 4.28}, {9, -1.22}}, {{1, -3.11}, {3, 5.2}, {4, -7.1}, {7, 1.16}, {9, -9.45}}, {{0, 0.19}, {3, 5.2}, {4, -7.1}, {8, -6.45}, {9, -4.51}}, {{0, -2.92}, {1, -6.35}, {2, -9.09}, {3, -4.61}, {8, -6.45}, {9, 3.72}}, {{0, -3.11}, {1, -6.35}, {2, -13.04}, {3, -4.61}, {4, -0.92}, {7, -3.04}, {9, -7.38}}, {{0, 6.5}, {2, -3.95}, {4, -0.92}, {5, 4.29}, {7, -3.04}, {8, -2.4}, {9, -4.75}}, {{0, 6.5}, {2, -2.97}, {5, 4.29}, {6, 0.52}, {8, -2.4}, {9, 2.63}}, {{2, -2.97}, {6, 0.52}, {7, 7.08}}, {{2, 9.34}, {3, -5.17}, {7, 7.08}, {8, 5.66}, {9, -8.29}}, {{0, -6.78}, {2, 9.34}, {3, -5.17}, {7, -6.62}, {8, 5.66}, {9, -17.69}}, {{0, -6.78}, {2, 3.72}, {4, -0.46}, {7, -6.62}, {8, -9.29}, {9, -11.3}}, {{0, 5.18}, {1, -0.79}, {2, 3.72}, {4, -0.46}, {6, 3.48}, {8, -9.29}, {9, 3.52}}, {{0, 1.73}, {1, -0.79}, {6, 3.48}, {9, 5.42}}, {{0, 2.08}, {2, 1.34}, {7, -7.31}}, {{0, 5.53}, {2, 1.34}, {7, 0.47}, {9, -7.72}}, {{5, -0.91}, {7, 7.78}, {9, -7.72}}, {{1, -7.87}, {3, 6.57}, {5, -0.91}, {7, 5.89}}, {{0, -8.64}, {1, -13.45}, {3, 6.57}, {5, 4.66}, {6, 2.88}, {7, 5.89}}, {{0, -0.26}, {1, -5.58}, {2, 5.21}, {5, 14.04}, {6, 2.88}}, {{0, 8.38}, {2, 5.21}, {3, -7.21}, {4, 8.59}, {5, 1.94}, {7, -4.67}}, {{0, 2.68}, {3, 1.95}, {4, 8.59}, {5, -7.44}, {7, 3.46}, {8, -7.03}}, {{0, 2.68}, {1, 6.43}, {3, 9.16}, {7, 8.13}, {8, -7.03}}, {{0, 1.81}, {1, 6.43}, {3, -3.1}, {9, 0.46}}, {{0, 1.81}, {3, -5.12}, {6, -7.11}, {7, -7.91}, {9, 0.46}}, {{1, -8.86}, {3, -2.02}, {5, -3.43}, {6, 1.25}, {7, -15.77}, {9, 4.43}}, {{1, -14.8}, {5, -3.43}, {6, 8.36}, {7, -8.83}, {9, 4.43}}, {{0, 4.53}, {1, -5.94}, {5, -6.35}, {7, -0.97}, {8, -9.05}}, {{0, 4.53}, {3, -8.94}, {5, -6.35}, {8, -9.73}, {9, 4.37}}, {{3, -8.94}, {5, -8.58}, {7, -7.43}, {8, -0.68}, {9, 6.63}}, {{1, 5.08}, {5, -8.58}, {7, -7.43}, {8, -2.09}, {9, 10.31}}, {{0, 0.22}, {1, 5.08}, {2, 0.28}, {4, 4.31}, {8, -9.45}, {9, 14.01}}, {{0, 0.22}, {2, 1.4}, {3, 7.45}, {4, 7.5}, {6, 3.93}, {7, -6.31}, {8, -7.36}, {9, 5.96}}, {{2, 1.12}, {3, 16.07}, {4, 7.1}, {6, 10.94}, {7, -6.31}}, {{3, 8.62}, {4, 5.88}, {5, 7.95}, {6, 7.01}, {8, 6.54}}, {{0, 0.11}, {4, 1.97}, {5, 7.95}, {8, 6.54}}, {{0, 0.11}, {3, -1.63}, {4, -7.29}, {5, -3.11}}, {{3, -1.63}, {4, 0.97}, {5, -3.11}, {6, -5.45}}, {{2, -5.06}, {4, 8.26}, {5, -1.09}, {6, -5.45}}, {{2, -2.4}, {3, 8.36}, {4, -6.82}, {5, -6.75}, {8, 7.78}}, {{0, 4.84}, {2, 10.14}, {3, 17.86}, {4, 0.36}, {5, -5.66}, {8, 7.78}}, {{0, 4.84}, {2, 2.42}, {3, 9.5}, {4, 7.18}, {5, 2.61}, {7, 2.79}, {9, 9.15}}, {{0, -8.66}, {1, -5.2}, {2, -5.06}, {3, 5.15}, {4, -6.23}, {5, 2.61}, {7, 2.79}, {8, 5.89}, {9, 15.6}}, {{0, -8.66}, {1, -5.2}, {2, -3.88}, {3, 5.15}, {4, -6.23}, {7, -6.13}, {8, 5.89}, {9, 6.45}}, {{1, -4.23}, {2, -3.88}, {3, 2.17}, {4, 4.84}, {6, 7.99}, {7, -6.13}, {8, 3.87}}, {{0, 9.88}, {1, -4.23}, {3, 2.17}, {4, 4.84}, {6, 7.99}, {7, -1.06}, {8, -0.0100002}}, {{0, 9.88}, {1, 5.9}, {5, -5.4}, {7, -1.06}, {8, 5.74}}, {{1, 5.9}, {5, -5.4}, {6, -7.6}, {8, 9.62}}, {{0, -1.45}, {3, 1.08}, {4, -0.68}, {5, 0.3}, {6, -1.52}}, {{0, -1.45}, {1, 7.96}, {2, -1.94}, {3, -2.43}, {4, -0.68}, {5, 2.8}, {6, 6.08}}, {{1, 9.35}, {2, -1.94}, {3, -3.51}, {5, 2.5}}, {{0, -3.16}, {1, 1.39}, {2, 0.22}, {8, 4.84}, {9, 2.97}}, {{0, -12.77}, {2, 0.22}, {3, -1.38}, {5, 1.23}, {8, 4.84}, {9, 2.97}}, {{0, -9.61}, {3, -9.38}, {5, 1.23}, {6, -7.78}, {7, -7.92}, {9, -6.08}}, {{1, 7.01}, {3, -7}, {5, 7.13}, {6, -8.5}, {7, -7.92}, {9, -6.08}}, {{1, 7.01}, {3, -3.41}, {5, 5.81}, {6, -0.72}, {8, -3.42}}, {{1, -0.01}, {3, -4.41}, {5, -1.32}, {8, -3.42}}, {{1, -0.01}}, {{1, 6.65}, {7, -2.93}}};

void checkNullEntries(const Polynomial& p) {
    int lastExp = 999999999;
    for(ListNode* node = p.head; node != nullptr; node = node->next) {
        if(node->i > lastExp) FAIL() << "The terms of the Polynomial are not ordered by descending exponent";
        if(node->i == lastExp) FAIL() << "There are multiple terms with exponent " << node->i << ". These should be merged!";
        if(node->ci == 0) FAIL() << "The coefficient of x^" << node->i << " is 0. That is not allowed.";
        lastExp = node->i;
    }
}

const float eps = .0001;

TEST_P(PolynomialTest, CheckFlip) {
    auto [index, params] = GetParam();
    Polynomial p = Polynomial(params);
    Polynomial q = Polynomial(params);
    q.flip();
    checkNullEntries(q);

    ListNode* gt = p.head;
    ListNode* out = q.head;

    while(gt != nullptr) {
        if(out == nullptr) {
            FAIL() << "Polynomial is missing terms!";
        }

        ASSERT_EQ(gt->i, out->i) << "Wrong exponent. Expected x^" << gt->i << " but got x^" << out->i;
        ASSERT_TRUE(std::abs(gt->ci + out->ci) < eps) << "Wrong coefficient for x^" << gt->i;

        gt = gt->next;
        out = out->next;
    }
}

ListNode* getLast(Polynomial& p) {
    ListNode* node = p.head; // node != nullptr
    while(node->next != nullptr) node = node->next;
    return node;
}


TEST_P(PolynomialTest, CheckMoveUp) {
    auto [index, params] = GetParam();
    Polynomial ref = Polynomial(params);

    if(params.empty()) {
        Polynomial p = Polynomial(params);
        p.moveUp(5.432f);
        checkNullEntries(p);
        ASSERT_NE(p.head, nullptr);
        ASSERT_EQ(p.head->i, 0);
        ASSERT_TRUE(std::abs(p.head->ci - 5.432f) < eps) ;
        ASSERT_EQ(p.head->next, nullptr);
    } else {
        ListNode* last = getLast(ref);
        for(float c: {5.432f, -10.432f, 2.3213f, -last->ci}) {
            Polynomial p = Polynomial(params);
            p.moveUp(c);
            if(p.head == nullptr) {
                // this should only happen if the input polynomial is only -c * x^0.
                ASSERT_EQ(ref.head->i, 0) << "Trying to move Polynomial " << Polynomial(params).ppr() << " up by " << c << " units. The output was an empty polynomial. This should only happen if the input was -c * x^0";
                ASSERT_TRUE(std::abs(ref.head->ci + c) < eps) << "Trying to move Polynomial " << Polynomial(params).ppr() << " up by " << c << " units. The output was an empty polynomial. This should only happen if the input was -c * x^0";
                ASSERT_EQ(ref.head->next, nullptr); // this should be obvious if the input is well-structured
                continue;
            }
            checkNullEntries(p);
            ListNode* end = getLast(p);

            if(last->i == 0){
                if(end->i == 0){
                    ASSERT_TRUE(std::abs(end->ci - c - last->ci) < eps) << "Trying to move Polynomial " << Polynomial(params).ppr() << " up by " << c << " units.\nConstant term = " << (last->ci > 0 ? "+" : "") << last->ci << ". Expected new constant term to be " << last->ci + c << " but got " << end->ci;
                } else {
                    ASSERT_TRUE(std::abs(last->ci + c) < eps) << "Trying to move Polynomial " << Polynomial(params).ppr() << " up by " << c << " units.\nConstant term = " << (last->ci > 0 ? "+" : "") << last->ci << "";
                }
            } else {
                if(end->i == 0){
                    ASSERT_TRUE(std::abs(end->ci - c) < eps) << "Trying to move Polynomial " << Polynomial(params).ppr() << " up by " << c << " units. The output has no constant term. Expected a constant term with coefficient " << c;
                } else {
                    FAIL() << "Trying to move Polynomial " << Polynomial(params).ppr() << " up by " << c << " units. Expected a constant term with coefficient " << c;
                }
            }
        }
    }
}


TEST_P(PolynomialTest, CheckSum) {
    auto [index, params] = GetParam();

    Polynomial p = Polynomial(params);
    unsigned int ix = (index + 1) % pols.size();
    Polynomial p2 = Polynomial(pols.at(ix).second);
    p.add(p2);
    checkNullEntries(p);

    ASSERT_EQ(p2.ppr(), Polynomial(pols.at(ix).second).ppr()) << "The second Polynomial is not allowed to be modified!";

    PolynomialParams paramsSol = sumSols.at(index);
    Polynomial sol = Polynomial(paramsSol);

    ASSERT_EQ(p.ppr(), sol.ppr()) << "Wrong output when computing " << Polynomial(params).ppr() << " + " << p2.ppr();
}

INSTANTIATE_TEST_SUITE_P(
        RandomLists,
        PolynomialTest,
        testing::ValuesIn(pols)
);
