#include <gtest/gtest.h>
#include <unordered_set>
#include "../include/blatt7.h"

using PPI = std::pair<int, PolynomialParams>;
using DS = std::vector<std::pair<int, float>>;

const float eps = .001;

void checkNullEntries(const Polynomial& p) {
    for(ListNode* node = p.head; node != nullptr; node = node->next) {
        if(node->ci == 0) FAIL() << "Der Koeffizient von x^" << node->i << " ist 0. Das ist nicht erlaubt.";
    }
}

vector<PPI> pols{PPI{0, {{1, 6.65}, {7, -2.93}}}, PPI{1, {{1, -6.65}, {2, 8.86}, {3, -9.76}, {4, -3.90}, {7, -5.51}, {9, -3.55}}}, PPI{2, {{0, 4.92}, {5, -7.38}, {7, -4.79}}}, PPI{3, {{0, 6.79}, {1, 4.40}, {8, -5.65}, {9, 2.77}}}, PPI{4, {{0, -4.00}, {1, 6.39}, {6, 9.59}, {8, 3.70}}}, PPI{5, {{4, 6.99}, {5, 4.98}, {6, -2.62}}}, PPI{6, {{3, -3.10}, {5, 5.89}, {7, 3.08}, {8, -2.75}}}, PPI{7, {{1, 0.49}, {7, 0.62}, {8, -3.57}, {9, -7.34}}}, PPI{8, {{0, 4.65}, {2, 5.05}, {3, 5.37}, {4, -9.17}, {5, -5.14}, {8, -9.89}}}, PPI{9, {{2, 8.90}, {3, -1.23}, {4, 1.96}, {8, 3.76}}}, PPI{10, {{0, -1.15}, {1, -3.01}, {2, -2.28}, {5, 8.85}, {6, 3.90}, {9, 8.67}}}, PPI{11, {{6, -1.82}, {7, -0.69}}}, PPI{12, {{0, 2.44}}}, PPI{13, {{4, -9.12}, {8, 1.69}}}, PPI{14, {{2, 1.75}, {4, 3.02}, {6, -2.56}, {7, 5.13}, {8, -7.14}}}, PPI{15, {{5, -4.60}, {9, -8.37}}}, PPI{16, {{5, -7.01}}}, PPI{17, {{0, -3.12}, {2, -6.65}, {5, -3.56}, {6, -3.00}, {9, 0.43}}}, PPI{18, {{7, 3.12}}}, PPI{19, {{1, -3.11}, {7, 1.16}, {9, -1.22}}}, PPI{20, {{3, 5.20}, {4, -7.10}, {9, -8.23}}}, PPI{21, {{0, 0.19}, {8, -6.45}, {9, 3.72}}}, PPI{22, {{0, -3.11}, {1, -6.35}, {2, -9.09}, {3, -4.61}}}, PPI{23, {{2, -3.95}, {4, -0.92}, {7, -3.04}, {9, -7.38}}}, PPI{24, {{0, 6.50}, {5, 4.29}, {8, -2.40}, {9, 2.63}}}, PPI{25, {{2, -2.97}, {6, 0.52}}}, PPI{26, {{7, 7.08}}}, PPI{27, {{2, 9.34}, {3, -5.17}, {8, 5.66}, {9, -8.29}}}, PPI{28, {{0, -6.78}, {7, -6.62}, {9, -9.40}}}, PPI{29, {{2, 3.72}, {4, -0.46}, {8, -9.29}, {9, -1.90}}}, PPI{30, {{0, 5.18}, {1, -0.79}, {6, 3.48}, {9, 5.42}}}, PPI{31, {{0, -3.45}}}, PPI{32, {{0, 5.53}, {2, 1.34}, {7, -7.31}}}, PPI{33, {{7, 7.78}, {9, -7.72}}}, PPI{34, {{5, -0.91}}}, PPI{35, {{1, -7.87}, {3, 6.57}, {7, 5.89}}}, PPI{36, {{0, -8.64}, {1, -5.58}, {5, 4.66}, {6, 2.88}}}, PPI{37, {{0, 8.38}, {2, 5.21}, {5, 9.38}}}, PPI{38, {{3, -7.21}, {4, 8.59}, {5, -7.44}, {7, -4.67}}}, PPI{39, {{0, 2.68}, {3, 9.16}, {7, 8.13}, {8, -7.03}}}, PPI{40, {{1, 6.43}}}, PPI{41, {{0, 1.81}, {3, -3.10}, {9, 0.46}}}, PPI{42, {{3, -2.02}, {6, -7.11}, {7, -7.91}}}, PPI{43, {{1, -8.86}, {5, -3.43}, {6, 8.36}, {7, -7.86}, {9, 4.43}}}, PPI{44, {{1, -5.94}, {7, -0.97}}}, PPI{45, {{0, 4.53}, {5, -6.35}, {8, -9.05}}}, PPI{46, {{3, -8.94}, {8, -0.68}, {9, 4.37}}}, PPI{47, {{5, -8.58}, {7, -7.43}, {9, 2.26}}}, PPI{48, {{1, 5.08}, {8, -2.09}, {9, 8.05}}}, PPI{49, {{0, 0.22}, {2, 0.28}, {4, 4.31}, {8, -7.36}, {9, 5.96}}}, PPI{50, {{2, 1.12}, {3, 7.45}, {4, 3.19}, {6, 3.93}, {7, -6.31}}}, PPI{51, {{3, 8.62}, {4, 3.91}, {6, 7.01}}}, PPI{52, {{4, 1.97}, {5, 7.95}, {8, 6.54}}}, PPI{53, {{0, 0.11}}}, PPI{54, {{3, -1.63}, {4, -7.29}, {5, -3.11}}}, PPI{55, {{4, 8.26}, {6, -5.45}}}, PPI{56, {{2, -5.06}, {5, -1.09}}}, PPI{57, {{2, 2.66}, {3, 8.36}, {4, -6.82}, {5, -5.66}, {8, 7.78}}}, PPI{58, {{0, 4.84}, {2, 7.48}, {3, 9.50}, {4, 7.18}}}, PPI{59, {{2, -5.06}, {5, 2.61}, {7, 2.79}, {9, 9.15}}}, PPI{60, {{0, -8.66}, {1, -5.20}, {3, 5.15}, {4, -6.23}, {8, 5.89}, {9, 6.45}}}, PPI{61, {{2, -3.88}, {7, -6.13}}}, PPI{62, {{1, -4.23}, {3, 2.17}, {4, 4.84}, {6, 7.99}, {8, 3.87}}}, PPI{63, {{0, 9.88}, {7, -1.06}, {8, -3.88}}}, PPI{64, {{1, 5.90}, {5, -5.40}, {8, 9.62}}}, PPI{65, {{6, -7.60}}}, PPI{66, {{0, -1.45}, {3, 1.08}, {4, -0.68}, {5, 0.30}, {6, 6.08}}}, PPI{67, {{1, 7.96}, {2, -1.94}, {3, -3.51}, {5, 2.50}}}, PPI{68, {{1, 1.39}}}, PPI{69, {{0, -3.16}, {2, 0.22}, {8, 4.84}, {9, 2.97}}}, PPI{70, {{0, -9.61}, {3, -1.38}, {5, 1.23}}}, PPI{71, {{3, -8.00}, {6, -7.78}, {7, -7.92}, {9, -6.08}}}, PPI{72, {{1, 7.01}, {3, 1.00}, {5, 7.13}, {6, -0.72}}}, PPI{73, {{3, -4.41}, {5, -1.32}, {8, -3.42}}}, PPI{74, {{1, -0.01}}}};

auto evalSols = vector<DS>{DS{{-1, -3.72}, {-2, 361.74}, {-2, 361.74}, {0, 0}, {1, 3.72}}, DS{{-1, 30.43}, {-2, 2587.3}, {-2, 2587.3}, {0, 0}, {1, -20.51}}, DS{{-1, 17.09}, {-2, 854.2}, {-2, 854.2}, {0, 4.92}, {1, -7.25}}, DS{{-1, -6.03}, {-2, -2866.65}, {-2, -2866.65}, {0, 6.79}, {1, 8.31}}, DS{{-1, 2.9}, {-2, 1544.18}, {-2, 1544.18}, {0, -4}, {1, 15.68}}, DS{{-1, -0.61}, {-2, -215.2}, {-2, -215.2}, {0, 0}, {1, 9.35}}, DS{{-1, -8.62}, {-2, -1261.92}, {-2, -1261.92}, {0, 0}, {1, 3.12}}, DS{{-1, 2.66}, {-2, 2763.82}, {-2, 2763.82}, {0, 0}, {1, -9.8}}, DS{{-1, -9.59}, {-2, -2532.19}, {-2, -2532.19}, {0, 4.65}, {1, -9.13}}, DS{{-1, 15.85}, {-2, 1039.36}, {-2, 1039.36}, {0, 0}, {1, 13.39}}, DS{{-1, -14.04}, {-2, -4476.89}, {-2, -4476.89}, {0, -1.15}, {1, 14.98}}, DS{{-1, -1.13}, {-2, -28.16}, {-2, -28.16}, {0, 0}, {1, -2.51}}, DS{{-1, 2.44}, {-2, 2.44}, {-2, 2.44}, {0, 2.44}, {1, 2.44}}, DS{{-1, -7.43}, {-2, 286.72}, {-2, 286.72}, {0, 0}, {1, -7.43}}, DS{{-1, -10.06}, {-2, -2593}, {-2, -2593}, {0, 0}, {1, 0.2}}, DS{{-1, 12.97}, {-2, 4432.64}, {-2, 4432.64}, {0, 0}, {1, -12.97}}, DS{{-1, 7.01}, {-2, 224.32}, {-2, 224.32}, {0, 0}, {1, -7.01}}, DS{{-1, -9.64}, {-2, -327.96}, {-2, -327.96}, {0, -3.12}, {1, -15.9}}, DS{{-1, -3.12}, {-2, -399.36}, {-2, -399.36}, {0, 0}, {1, 3.12}}, DS{{-1, 3.17}, {-2, 482.38}, {-2, 482.38}, {0, 0}, {1, -3.17}}, DS{{-1, -4.07}, {-2, 4058.56}, {-2, 4058.56}, {0, 0}, {1, -10.13}}, DS{{-1, -9.98}, {-2, -3555.65}, {-2, -3555.65}, {0, 0.19}, {1, -2.54}}, DS{{-1, -1.24}, {-2, 10.11}, {-2, 10.11}, {0, -3.11}, {1, -23.16}}, DS{{-1, 5.55}, {-2, 4137.16}, {-2, 4137.16}, {0, 0}, {1, -15.29}}, DS{{-1, -2.82}, {-2, -2091.74}, {-2, -2091.74}, {0, 6.5}, {1, 11.02}}, DS{{-1, -2.45}, {-2, 21.4}, {-2, 21.4}, {0, 0}, {1, -2.45}}, DS{{-1, -7.08}, {-2, -906.24}, {-2, -906.24}, {0, 0}, {1, 7.08}}, DS{{-1, 28.46}, {-2, 5772.16}, {-2, 5772.16}, {0, 0}, {1, 1.54}}, DS{{-1, 9.24}, {-2, 5653.38}, {-2, 5653.38}, {0, -6.78}, {1, -22.8}}, DS{{-1, -4.13}, {-2, -1397.92}, {-2, -1397.92}, {0, 0}, {1, -7.93}}, DS{{-1, 4.03}, {-2, -2545.56}, {-2, -2545.56}, {0, 5.18}, {1, 13.29}}, DS{{-1, -3.45}, {-2, -3.45}, {-2, -3.45}, {0, -3.45}, {1, -3.45}}, DS{{-1, 14.18}, {-2, 946.57}, {-2, 946.57}, {0, 5.53}, {1, -0.44}}, DS{{-1, -0.0600004}, {-2, 2956.8}, {-2, 2956.8}, {0, 0}, {1, 0.0600004}}, DS{{-1, 0.91}, {-2, 29.12}, {-2, 29.12}, {0, 0}, {1, -0.91}}, DS{{-1, -4.59}, {-2, -790.74}, {-2, -790.74}, {0, 0}, {1, 4.59}}, DS{{-1, -4.84}, {-2, 37.72}, {-2, 37.72}, {0, -8.64}, {1, -6.68}}, DS{{-1, 4.21}, {-2, -270.94}, {-2, -270.94}, {0, 8.38}, {1, 22.97}}, DS{{-1, 27.91}, {-2, 1030.96}, {-2, 1030.96}, {0, 0}, {1, -10.73}}, DS{{-1, -21.64}, {-2, -2910.92}, {-2, -2910.92}, {0, 2.68}, {1, 12.94}}, DS{{-1, -6.43}, {-2, -12.86}, {-2, -12.86}, {0, 0}, {1, 6.43}}, DS{{-1, 4.45}, {-2, -208.91}, {-2, -208.91}, {0, 1.81}, {1, -0.83}}, DS{{-1, 2.82}, {-2, 573.6}, {-2, 573.6}, {0, 0}, {1, -17.04}}, DS{{-1, 24.08}, {-2, -599.56}, {-2, -599.56}, {0, 0}, {1, -7.36}}, DS{{-1, 6.91}, {-2, 136.04}, {-2, 136.04}, {0, 0}, {1, -6.91}}, DS{{-1, 1.83}, {-2, -2109.07}, {-2, -2109.07}, {0, 4.53}, {1, -10.87}}, DS{{-1, 3.89}, {-2, -2340}, {-2, -2340}, {0, 0}, {1, -5.25}}, DS{{-1, 13.75}, {-2, 68.48}, {-2, 68.48}, {0, 0}, {1, -13.75}}, DS{{-1, -15.22}, {-2, -4666.8}, {-2, -4666.8}, {0, 0}, {1, 11.04}}, DS{{-1, -8.51}, {-2, -4865.38}, {-2, -4865.38}, {0, 0.22}, {1, 3.41}}, DS{{-1, 7.1}, {-2, 1055.12}, {-2, 1055.12}, {0, 0}, {1, 9.38}}, DS{{-1, 2.3}, {-2, 442.24}, {-2, 442.24}, {0, 0}, {1, 19.54}}, DS{{-1, 0.56}, {-2, 1451.36}, {-2, 1451.36}, {0, 0}, {1, 16.46}}, DS{{-1, 0.11}, {-2, 0.11}, {-2, 0.11}, {0, 0.11}, {1, 0.11}}, DS{{-1, -2.55}, {-2, -4.08}, {-2, -4.08}, {0, 0}, {1, -12.03}}, DS{{-1, 2.81}, {-2, -216.64}, {-2, -216.64}, {0, 0}, {1, 2.81}}, DS{{-1, -3.97}, {-2, 14.64}, {-2, 14.64}, {0, 0}, {1, -6.15}}, DS{{-1, 0.920001}, {-2, 2007.44}, {-2, 2007.44}, {0, 0}, {1, 6.32}}, DS{{-1, 10}, {-2, 73.64}, {-2, 73.64}, {0, 4.84}, {1, 29}}, DS{{-1, -19.61}, {-2, -5145.68}, {-2, -5145.68}, {0, 0}, {1, 9.49}}, DS{{-1, -15.4}, {-2, -1933.7}, {-2, -1933.7}, {0, -8.66}, {1, -2.6}}, DS{{-1, 2.25}, {-2, 769.12}, {-2, 769.12}, {0, 0}, {1, -10.01}}, DS{{-1, 18.76}, {-2, 1570.62}, {-2, 1570.62}, {0, 0}, {1, 14.64}}, DS{{-1, 7.06}, {-2, -847.72}, {-2, -847.72}, {0, 9.88}, {1, 4.94}}, DS{{-1, 9.12}, {-2, 2623.72}, {-2, 2623.72}, {0, 0}, {1, 10.12}}, DS{{-1, -7.6}, {-2, -486.4}, {-2, -486.4}, {0, 0}, {1, -7.6}}, DS{{-1, 2.57}, {-2, 358.55}, {-2, 358.55}, {0, -1.45}, {1, 5.33}}, DS{{-1, -8.89}, {-2, -75.6}, {-2, -75.6}, {0, 0}, {1, 5.01}}, DS{{-1, -1.39}, {-2, -2.78}, {-2, -2.78}, {0, 0}, {1, 1.39}}, DS{{-1, -1.07}, {-2, -283.88}, {-2, -283.88}, {0, -3.16}, {1, 4.87}}, DS{{-1, -9.46}, {-2, -37.93}, {-2, -37.93}, {0, -9.61}, {1, -9.76}}, DS{{-1, 14.22}, {-2, 3692.8}, {-2, 3692.8}, {0, 0}, {1, -29.78}}, DS{{-1, -15.86}, {-2, -296.26}, {-2, -296.26}, {0, 0}, {1, 14.42}}, DS{{-1, 2.31}, {-2, -798}, {-2, -798}, {0, 0}, {1, -9.15}}, DS{{-1, 0.01}, {-2, 0.02}, {-2, 0.02}, {0, 0}, {1, -0.01}}};

class PolynomialTest : public testing::TestWithParam<PPI> {};

TEST_P(PolynomialTest, CheckEvaluate) {
    auto [index, params] = GetParam();

    auto p = Polynomial(params);
    for(auto [x, solution]: evalSols.at(index)) {
        float output = p.evaluate(static_cast<float>(x));
        checkNullEntries(p);
        ASSERT_TRUE(std::abs(output - solution) < eps) << "Wrong evaluation of f(" << x <<"). Expected " << solution << ", but got " << output;
    }
}

TEST_P(PolynomialTest, CheckIsEqual) {
    auto [index, params] = GetParam();

    auto p = Polynomial(params);
    auto p2 = Polynomial(params);
    ASSERT_TRUE(p.equalTo(p2));
    checkNullEntries(p);

    unsigned int ix = (index + 1) % pols.size();
    auto p3 = Polynomial(pols.at(ix).second);
    ASSERT_FALSE(p.equalTo(p3));
    ASSERT_FALSE(p3.equalTo(p));
    checkNullEntries(p);
    checkNullEntries(p3);
}

INSTANTIATE_TEST_SUITE_P(
        RandomLists,
        PolynomialTest,
        testing::ValuesIn(pols)
);

using DNK = vector<vector<int>>;

auto josephusSols = vector<DNK>{{{2, 1}}, {{2, 1, 3}, {3, 1, 2}}, {{2, 4, 3, 1}, {3, 2, 4, 1}, {4, 1, 3, 2}}, {{2, 4, 1, 5, 3}, {3, 1, 5, 2, 4}, {4, 3, 5, 2, 1}, {5, 1, 3, 4, 2}}, {{2, 4, 6, 3, 1, 5}, {3, 6, 4, 2, 5, 1}, {4, 2, 1, 3, 6, 5}, {5, 4, 6, 2, 3, 1}, {6, 1, 3, 2, 5, 4}}, {{2, 4, 6, 1, 5, 3, 7}, {3, 6, 2, 7, 5, 1, 4}, {4, 1, 6, 5, 7, 3, 2}, {5, 3, 2, 4, 7, 1, 6}, {6, 5, 7, 2, 1, 4, 3}, {7, 1, 3, 6, 2, 4, 5}}, {{2, 4, 6, 8, 3, 7, 5, 1}, {3, 6, 1, 5, 2, 8, 4, 7}, {4, 8, 5, 2, 1, 3, 7, 6}, {5, 2, 8, 7, 1, 4, 6, 3}, {6, 4, 3, 5, 8, 7, 2, 1}, {7, 6, 8, 2, 5, 1, 3, 4}, {8, 1, 3, 6, 5, 2, 7, 4}}, {{2, 4, 6, 8, 1, 5, 9, 7, 3}, {3, 6, 9, 4, 8, 5, 2, 7, 1}, {4, 8, 3, 9, 6, 5, 7, 2, 1}, {5, 1, 7, 4, 3, 6, 9, 2, 8}, {6, 3, 1, 9, 2, 5, 4, 8, 7}, {7, 5, 4, 6, 9, 3, 8, 1, 2}, {8, 7, 9, 2, 5, 4, 1, 6, 3}, {9, 1, 3, 6, 4, 5, 2, 7, 8}}, {{2, 4, 6, 8, 10, 3, 7, 1, 9, 5}, {3, 6, 9, 2, 7, 1, 8, 5, 10, 4}, {4, 8, 2, 7, 3, 10, 9, 1, 6, 5}, {5, 10, 6, 2, 9, 8, 1, 4, 7, 3}, {6, 2, 9, 7, 5, 8, 1, 10, 4, 3}, {7, 4, 2, 1, 3, 6, 10, 5, 8, 9}, {8, 6, 5, 7, 10, 3, 2, 9, 4, 1}, {9, 8, 10, 2, 5, 3, 4, 1, 6, 7}, {10, 1, 3, 6, 2, 9, 5, 7, 4, 8}}, {{2, 4, 6, 8, 10, 1, 5, 9, 3, 11, 7}, {3, 6, 9, 1, 5, 10, 4, 11, 8, 2, 7}, {4, 8, 1, 6, 11, 7, 3, 2, 5, 10, 9}, {5, 10, 4, 11, 7, 3, 2, 6, 9, 1, 8}, {6, 1, 8, 4, 2, 11, 3, 7, 5, 10, 9}, {7, 3, 11, 9, 8, 10, 2, 6, 1, 4, 5}, {8, 5, 3, 2, 4, 7, 11, 10, 6, 1, 9}, {9, 7, 6, 8, 11, 3, 1, 2, 10, 4, 5}, {10, 9, 11, 2, 5, 1, 8, 4, 6, 3, 7}, {11, 1, 3, 6, 10, 8, 9, 5, 2, 4, 7}}, {{2, 4, 6, 8, 10, 12, 3, 7, 11, 5, 1, 9}, {3, 6, 9, 12, 4, 8, 1, 7, 2, 11, 5, 10}, {4, 8, 12, 5, 10, 3, 11, 7, 6, 9, 2, 1}, {5, 10, 3, 9, 4, 12, 8, 7, 11, 2, 6, 1}, {6, 12, 7, 2, 10, 8, 5, 9, 1, 11, 4, 3}, {7, 2, 10, 6, 4, 3, 5, 9, 1, 8, 11, 12}, {8, 4, 1, 11, 10, 12, 3, 7, 6, 2, 9, 5}, {9, 6, 4, 3, 5, 8, 12, 10, 11, 7, 1, 2}, {10, 8, 7, 9, 12, 3, 11, 6, 2, 4, 1, 5}, {11, 10, 12, 2, 5, 9, 7, 8, 4, 1, 3, 6}, {12, 1, 3, 6, 10, 7, 5, 9, 8, 4, 2, 11}}, {{2, 4, 6, 8, 10, 12, 1, 5, 9, 13, 7, 3, 11}, {3, 6, 9, 12, 2, 7, 11, 4, 10, 5, 1, 8, 13}, {4, 8, 12, 3, 9, 1, 7, 2, 11, 10, 13, 6, 5}, {5, 10, 2, 8, 1, 9, 4, 13, 12, 3, 7, 11, 6}, {6, 12, 5, 13, 8, 3, 1, 11, 2, 7, 4, 10, 9}, {7, 1, 9, 4, 13, 11, 10, 12, 3, 8, 2, 5, 6}, {8, 3, 12, 9, 6, 5, 7, 11, 2, 1, 10, 4, 13}, {9, 5, 2, 13, 12, 1, 4, 8, 6, 7, 3, 10, 11}, {10, 7, 5, 4, 6, 9, 13, 8, 3, 12, 1, 11, 2}, {11, 9, 8, 10, 13, 3, 7, 5, 6, 2, 12, 1, 4}, {12, 11, 13, 2, 5, 9, 6, 4, 8, 7, 3, 1, 10}, {13, 1, 3, 6, 10, 5, 2, 4, 9, 11, 12, 7, 8}}, {{2, 4, 6, 8, 10, 12, 14, 3, 7, 11, 1, 9, 5, 13}, {3, 6, 9, 12, 1, 5, 10, 14, 7, 13, 8, 4, 11, 2}, {4, 8, 12, 2, 7, 13, 5, 11, 6, 1, 14, 3, 10, 9}, {5, 10, 1, 7, 13, 6, 14, 9, 4, 3, 8, 12, 2, 11}, {6, 12, 4, 11, 5, 14, 9, 7, 3, 8, 13, 10, 2, 1}, {7, 14, 8, 2, 11, 6, 4, 3, 5, 10, 1, 9, 12, 13}, {8, 2, 11, 6, 3, 14, 13, 1, 5, 10, 9, 4, 12, 7}, {9, 4, 14, 11, 8, 7, 10, 13, 3, 1, 2, 12, 5, 6}, {10, 6, 3, 1, 14, 2, 5, 9, 4, 13, 8, 11, 7, 12}, {11, 8, 6, 5, 7, 10, 14, 4, 2, 3, 13, 9, 12, 1}, {12, 10, 9, 11, 14, 3, 7, 4, 2, 6, 5, 1, 13, 8}, {13, 12, 14, 2, 5, 9, 4, 1, 3, 8, 10, 11, 6, 7}, {14, 1, 3, 6, 10, 4, 12, 11, 2, 9, 5, 8, 7, 13}}};

class JosephusTest : public testing::TestWithParam<DNK> {};

TEST_P(JosephusTest, Check) {
    auto listK = GetParam();
    int k = 2;
    for(auto sol: listK) {
        int n = sol.size();
        int survSol = sol.back();
        sol.pop_back();

        auto [order, survivor] = josephus(n, k);
        ASSERT_EQ(order, sol) << "Wrong order of eliminations";
        ASSERT_EQ(survivor, survSol) << "Wrong Label of survivor";
        k++;
    }
}

INSTANTIATE_TEST_SUITE_P(
    First14,
    JosephusTest,
    testing::ValuesIn(josephusSols)
);