//
// Created by Robin on 25.03.24.
//

#include <gtest/gtest.h>
#include <string>
#include <utility>
#include <stdexcept>
#include <exception>
#include "../include/blatt4.h"

using VEC = vector<int>;
using LS = std::pair<int, int>;

uint64_t asNumber(VEC& digits, int base) {
    uint64_t val = 0;
    uint64_t power = 1;

    for (auto rit = digits.rbegin(); rit != digits.rend(); ++rit, power *= base) {
        val += *rit * power;
    }

    return val;
}

VEC asList(int val, int base) {
    VEC list;
    while(val > 0) {
        list.push_back(val % base);
        val /= base;
    }
    std::reverse(list.begin(), list.end());
    return list;
}

class PlusOne : public testing::TestWithParam<int> {};

TEST_P(PlusOne, CheckNumbers) {
    int number = GetParam();
    VEC digits = asList(number, 10);
    VEC after = plusOne(digits);
    uint64_t yourOutput = asNumber(after, 10);
    ASSERT_EQ(yourOutput, number + 1);
}

INSTANTIATE_TEST_SUITE_P(
        First100Numbers,
        PlusOne,
        testing::Range(1, 100)
);

INSTANTIATE_TEST_SUITE_P(
        RandomValues,
        PlusOne,
        testing::Values(1906, 4558, 4688, 21983, 30113, 30979, 31349, 38910, 41342, 58714, 68962, 69222, 70662, 77700, 93834, 97394, 100999, 107818, 133167, 134099, 1099, 135587, 135923, 143164, 145855, 168396, 170905, 174778, 178777, 189024, 215414, 226829, 235755, 245075, 256004, 258088, 264433, 265862, 315630, 343032, 348448, 350600, 363641, 370750, 379394, 379463, 396353, 404768, 407387, 417178, 424445, 442820, 446698, 463956, 474447, 483155, 488763, 504778, 514934, 519185, 533077, 543191, 543554, 562006, 578177, 613892, 616620, 641176, 677317, 680190, 683200, 684732, 687497, 693849, 695384, 703190, 706851, 711452, 733282, 740129, 742712, 747802, 748096, 753091, 768027, 768615, 773337, 774562, 775748, 791576, 810518, 818967, 845074, 852128, 868363, 919314, 925010, 930010, 954736, 990907, 1554999)
);

INSTANTIATE_TEST_SUITE_P(
        StringsOf9,
        PlusOne,
        testing::Values(9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 9099, 909, 99899, 9998999)
);


class AddNumbers : public testing::TestWithParam<LS> {};

const VEC bases = {2, 4, 8, 10, 16, 32, 47};

std::string digitsToStr(vector<int>& digits) {
    std::stringstream ss;
    std::string sep;
    for (int digit : digits) {
        ss << sep << digit;
        sep = ":";
    }
    return ss.str();
}

bool sanityCheck(VEC& after, int base, int x, int y) {
    for(int digit: after) {
        if (digit < 0) {
            std::cout << "Digits cannot be negative.\nGot " << digitsToStr(after) << "\nInput was: x=" << x << ", y=" << y << ", base=" << base << std::endl;
            return false;
        }
        if (digit >= base) {
            std::cout << "Digits cannot be >= base.\nGot " << digitsToStr(after) << "\nInput was: x=" << x << ", y=" << y << ", base=" << base << std::endl;
            return false;
        }
    }
    return true;
}

bool check(VEC& digitsA, VEC& digitsB, int base, uint64_t expected, int x, int y) {
    try {
        VEC after = addNumbers(digitsA, digitsB, base);
        if(!sanityCheck(after, base, x, y)) return false;
        uint64_t output = asNumber(after, base);
        if(output != expected) {
            std::cout << "Wrong output. Expected " << expected << ", got " << output << "\nInput was: x=" << x << ", y=" << y << ", base=" << base << std::endl;
            return false;
        }
    } catch (const std::invalid_argument& e) {
        std::cout << "addNumbers() failed due to malformed digit input: " << e.what() << std::endl;
        return false;
    } catch (const std::exception& e) {
        std::cout << "addNumbers() threw an unexpected exception: " << e.what() << std::endl;
        return false;
    } catch (...) {
        std::cout << "addNumbers() threw an exception." << std::endl;
        return false;
    }
    return true;
}


TEST_P(AddNumbers, CheckNumbers) {
    auto [x, y] = GetParam();
    uint64_t expected = static_cast<uint64_t>(x) + y;

    for(int base: bases) {
        VEC digitsA = asList(x, base);
        VEC digitsB = asList(y, base);
        if(!check(digitsA, digitsB, base, expected, x , y)) {
            FAIL();
        }

        // Test other way around
        digitsA = asList(y, base);
        digitsB = asList(x, base);
        if(!check(digitsA, digitsB, base, expected, x , y)) {
            FAIL();
        }
    }
}

INSTANTIATE_TEST_SUITE_P(
        EdgeCases,
        AddNumbers,
        testing::Values(LS{0, 0}, LS{0, 1}, LS{0, 9}, LS{1, 1}, LS{2, 6}, LS{1, 9}, LS{2, 8}, LS{3, 7}, LS{4, 6}, LS{5, 5}, LS{10, 10}, LS{11, 9}, LS{92, 8}, LS{99, 1}, LS{959, 1}, LS{7, 43248}, LS{9999900, 100})
);

INSTANTIATE_TEST_SUITE_P(
        RandomNumbers,
        AddNumbers,
        testing::Values(LS{1621096562, 1331565}, LS{698019676, 857758337}, LS{1811287242, 182664}, LS{16136, 1116959593}, LS{1043473368, 1270949978}, LS{199, 849168815}, LS{630065301, 1190308682}, LS{1862259396, 822932716}, LS{39445269, 1520857616}, LS{1759092397, 1685509971}, LS{374900243, 1972276012}, LS{206351953, 1848418627}, LS{427972719, 66743121}, LS{1820768262, 89191498}, LS{814678418, 1533841391}, LS{1819520203, 850346698}, LS{1646658094, 1424821720}, LS{1205582758, 985789394}, LS{774717133, 245516150}, LS{1313850236, 535086579}, LS{1945513671, 1508863511}, LS{868027142, 540711841}, LS{1231936400, 1012006131}, LS{1512972214, 846311161}, LS{1587724142, 1541424268}, LS{1277533894, 669108760}, LS{86085188, 181490241}, LS{1397899335, 1640136783}, LS{1801532012, 548719747}, LS{287246955, 1630444193}, LS{1537051967, 1431866094}, LS{618573762, 1158314436}, LS{1613641016, 279871384}, LS{1993134567, 1999509148}, LS{102478690, 996398410}, LS{491760703, 1180888040}, LS{1185306250, 378}, LS{72074, 471902124}, LS{533445097, 533840580}, LS{1277, 53080672}, LS{705023103, 27453}, LS{1953085729, 708722513}, LS{1655811966, 1825293237}, LS{887507744, 516422688}, LS{619267963, 1369928255}, LS{471894093, 706846865}, LS{343358635, 936353469}, LS{252126181, 516436965}, LS{57139710, 1475640350}, LS{1405337961, 618856808}, LS{1359696359, 409921431}, LS{741369461, 368641161}, LS{1412116779, 1771276432}, LS{1450882758, 1718662698}, LS{128708423, 1939522871}, LS{707068772, 1189759837}, LS{1681668564, 1919523806}, LS{251497413, 966898425}, LS{667289694, 813772142}, LS{1343876864, 1118888191}, LS{1170587150, 1879010512}, LS{1861848446, 1813864707}, LS{665659123, 1385611343}, LS{632682748, 1600634143}, LS{679781981, 150512600}, LS{887831149, 364941627}, LS{1824283740, 404790415}, LS{120424349, 1617152051}, LS{26168759, 711881520}, LS{624842773, 1759659417}, LS{1392010280, 1011539675}, LS{57970561, 75124525}, LS{1408298967, 1214413083}, LS{1754403891, 939623609}, LS{1895058572, 1275695506}, LS{556684207, 1826893590}, LS{1130344350, 500711666}, LS{795954096, 1223126138}, LS{19314, 258269157}, LS{1109, 30736}, LS{717767729, 138684}, LS{104, 670201624}, LS{1660331651, 1451394108}, LS{16161767, 1830230320}, LS{1618338865, 680033065}, LS{1272358225, 1886443235}, LS{805458731, 1514948598}, LS{450016043, 1447856723}, LS{1088795749, 1486944442}, LS{582140743, 1452322891}, LS{1805262596, 1568743854}, LS{960616530, 1210593306}, LS{460516011, 821913426}, LS{255719966, 1551844082}, LS{192958912, 1955318903}, LS{1730096298, 1744847578}, LS{1431419000, 1858291710}, LS{1694149097, 24898016}, LS{779310230, 1226029172}, LS{163534858, 1815472859}, LS{1478388605, 1066013859}, LS{380721302, 1412494924}, LS{1734144975, 1968270053}, LS{1678961103, 346631166}, LS{852063421, 1008873013}, LS{1541715469, 1724298798}, LS{155823981, 1542401502}, LS{1366714684, 1049682270}, LS{1438240824, 1100685013}, LS{884303907, 854357226}, LS{622098119, 1305890739}, LS{1980487648, 1573610545}, LS{1001750122, 1185777574}, LS{534036738, 1581696932}, LS{129375929, 56144771}, LS{1869568792, 1139462589}, LS{1142, 575}, LS{3105347, 1842813680}, LS{1520961827, 1991257080}, LS{1436984289, 330277312}, LS{1212402396, 929269453}, LS{995181173, 944958778}, LS{1051950564, 630070117}, LS{1978318870, 1142640264}, LS{797417864, 1271285629}, LS{1114428596, 1892976361}, LS{889797876, 1814937405}, LS{1691092144, 1342368542}, LS{616395878, 1901199388}, LS{1951752750, 673073732}, LS{220672427, 1235679952}, LS{981177184, 1073263835}, LS{356564197, 811670492}, LS{451696053, 808090185}, LS{917790756, 37836347}, LS{742511480, 305581308}, LS{197187295, 792366502}, LS{57760962, 657829676}, LS{654131765, 637342630}, LS{874532759, 1527915746}, LS{209528325, 1209802987}, LS{1134901667, 972215}, LS{14, 95}, LS{802988935, 1396324430}, LS{806681196, 1864566154}, LS{1023776371, 1003125403}, LS{1328888909, 87760448}, LS{1768923738, 426356720}, LS{430154725, 334285086}, LS{1849248833, 1480249598}, LS{1679072941, 53968705}, LS{760601287, 55566167}, LS{526729309, 1483070779}, LS{893109241, 176100045}, LS{1951001246, 31981973}, LS{1055684086, 1857546158}, LS{620625940, 135002986}, LS{235912262, 729173583}, LS{1227237019, 1267969562}, LS{307479931, 1890503453}, LS{1779321583, 1808989967}, LS{1144591739, 1373576627}, LS{1603204020, 198310608}, LS{1842309061, 1530781847}, LS{533675842, 1858208066}, LS{1699056070, 30171877}, LS{74191, 54999999}, LS{83, 1}, LS{5474, 301854114}, LS{1186871765, 1085564094}, LS{955453962, 851013286}, LS{1912630608, 971291335}, LS{487521310, 373246347}, LS{975436259, 60632444}, LS{1828407829, 327889564}, LS{1814890245, 1101747246}, LS{410632318, 489087342}, LS{780291344, 433613218}, LS{671463712, 1973964222}, LS{512829784, 451494798}, LS{285052698, 1677939953}, LS{146772895, 624977459}, LS{551728527, 103680101}, LS{423336294, 1133608058}, LS{113964734, 1027498846}, LS{837054554, 1050314304}, LS{376000467, 1725223693}, LS{645314863, 1349507304}, LS{439626968, 723841588}, LS{1256676130, 366049013}, LS{1735409145, 692421168}, LS{188951406, 1325454197}, LS{1459567937, 1028243333}, LS{75459554, 1596328333}, LS{129945473, 787803230}, LS{342638717, 110525786}, LS{738544966, 1869714202}, LS{537582206, 79361679}, LS{12762397, 1024519603}, LS{1468100681, 1501882091})
);